CLASS zcl_travel_custom_handler DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPES: tt_travel TYPE STANDARD TABLE OF zsodogan_i_travel_u WITH DEFAULT KEY.
    INTERFACES if_rap_query_provider .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_travel_custom_handler IMPLEMENTATION.


  METHOD if_rap_query_provider~select.
    DATA: lt_travel_response TYPE tt_travel.


    DATA(lv_entity_id) =  io_request->get_entity_id( ).


    TRY.

        CASE lv_entity_id.
          WHEN 'ZSODOGAN_I_TRAVEL_U'.
            IF io_request->is_data_requested( ).

              DATA(lv_sql_filter) = io_request->get_filter( )->get_as_sql_string( ).
              DATA(lt_filter) = io_request->get_filter( )->get_as_ranges( ).

              DATA(lt_req_elements) = io_request->get_requested_elements( ).
              DATA(lv_req_elements) = concat_lines_of( table = lt_req_elements sep = `, ` ).


**parameters
              DATA(lt_parameters) = io_request->get_parameters( ).


*              DATA(lv_next_year) = CONV dats( cl_abap_context_info=>get_system_date( ) + 365 ) .
*              DATA(lv_par_filter) = | BEGIN_DATE >= '{ cl_abap_dyn_prg=>escape_quotes( VALUE #( lt_parameters[ parameter_name = 'P_START_DATE' ]-value
*              DEFAULT cl_abap_context_info=>get_system_date( ) ) ) }'| &&
*              | AND | &&
*              | END_DATE <= '{ cl_abap_dyn_prg=>escape_quotes( VALUE #( lt_parameters[ parameter_name = 'P_END_DATE' ]-value DEFAULT lv_next_year ) ) }'| .
*
*              IF lv_sql_filter IS INITIAL.
*                lv_sql_filter = lv_par_filter.
*              ELSE.
*                lv_sql_filter = |({ lv_sql_filter } AND { lv_par_filter } )| .
*              ENDIF.


**Set the paging
              DATA(lv_page_size) = io_request->get_paging(  )->get_page_size( ).

              DATA(lv_offset) = io_request->get_paging(  )->get_offset( ).
              DATA(lv_max_rows) = COND #(  WHEN lv_page_size EQ if_rap_query_paging=>page_size_unlimited THEN 0
                                           ELSE lv_page_size
                                         ).


*Query the table!
              SELECT (lv_req_elements) FROM zsodogan_travel"/dmo/travel
              WHERE (lv_sql_filter)
              ORDER BY ('primary key')
              INTO CORRESPONDING FIELDS OF TABLE @lt_travel_response
              OFFSET @lv_offset UP TO  @lv_max_rows ROWS.

              io_response->set_data( it_data = lt_travel_response ).

**Set the number of records requested!
              IF io_request->is_total_numb_of_rec_requested( ).
                SELECT COUNT( * ) FROM zsodogan_travel
                 WHERE (lv_sql_filter)
                 INTO @DATA(lv_travel_count).
**fill response
                io_response->set_total_number_of_records( lv_travel_count ).
              ENDIF.


            ENDIF.



          WHEN OTHERS.

        ENDCASE.

      CATCH cx_root INTO DATA(lo_exception).

    ENDTRY.

  ENDMETHOD.
ENDCLASS.